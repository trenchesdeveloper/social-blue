basePath: /v1
definitions:
  db.CreatePostRow:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      version:
        type: integer
    type: object
  db.GetCommentsByPostIDRow:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      id_2:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  db.UpdatePostRow:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      version:
        type: integer
    type: object
  db.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      password:
        items:
          type: integer
        type: array
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.CreatPostDto:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  dto.GetPostWithCommentsDto:
    properties:
      comments:
        items:
          $ref: '#/definitions/db.GetCommentsByPostIDRow'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/db.User'
      user_id:
        type: integer
    type: object
  dto.LoginUserDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterUserDto:
    properties:
      email:
        type: string
      first_name:
        maxLength: 100
        type: string
      last_name:
        maxLength: 100
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  dto.UpdatePostDto:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  main.UserWithRole:
    properties:
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      id_2:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      level:
        type: integer
      name:
        type: string
      password:
        items:
          type: integer
        type: array
      role_id:
        type: integer
      role_level:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role_id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a social media API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Social Blue API
paths:
  /auth/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activate a user
      parameters:
      - description: Activation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Activate a user
      tags:
      - users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Login a user
      tags:
      - users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserWithToken'
      summary: Register a new user
      tags:
      - users
  /health:
    get:
      description: Check the health status of the service
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check the health status of the service
  /posts:
    post:
      consumes:
      - application/json
      description: Create a post
      operationId: create-post
      parameters:
      - description: Post data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatPostDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreatePostRow'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a post
      tags:
      - posts
  /posts/{postID}:
    delete:
      description: Delete a post by ID
      operationId: delete-post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a post
      tags:
      - posts
    get:
      description: Get a post by ID
      operationId: get-post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPostWithCommentsDto'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post by ID
      operationId: update-post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Post data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePostDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UpdatePostRow'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a post
      tags:
      - posts
  /users/{userID}:
    get:
      description: Get a user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserWithRole'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a user
  /users/{userID}/follow:
    put:
      description: Follow a user by ID
      operationId: follow-user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserWithRole'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow a user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
