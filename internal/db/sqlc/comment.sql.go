// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comment.sql

package db

import (
	"context"
	"time"
)

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT c.id, c.post_id, c.user_id, c.content, c.created_at, users.username, users.id
FROM comments c
         JOIN users on users.id = c.user_id
WHERE c.post_id = $1
ORDER BY c.created_at DESC
`

type GetCommentsByPostIDRow struct {
	ID        int64     `json:"id"`
	PostID    int64     `json:"post_id"`
	UserID    int64     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Username  string    `json:"username"`
	ID_2      int64     `json:"id_2"`
}

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID int64) ([]GetCommentsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCommentsByPostIDRow{}
	for rows.Next() {
		var i GetCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
